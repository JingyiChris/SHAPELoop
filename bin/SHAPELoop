#!/bin/bash

##############################################################################
#   SHAPELoop is an RNA secondary structure prediction tool based on         #
#       characteristic SHAPE patterns for various loop motifs.               #
#                                                                            #
#   Author: Jingyi Cao                                                       #
#                                                                            #
#   Copyright (C) 2020  Jingyi Cao                                           #
#                                                                            #
#   SHAPELoop is distributed in the hope that it will be useful,             #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                     #
#                                                                            #
#   Contact: caojingyi1258@outlook.com                                       #
##############################################################################

#------
#Set fonts for Help
#------
NORM=`tput sgr0`
BOLD=`tput bold`
REV=`tput smso`
#get script name
#------
SCRIPT=`basename ${BASH_SOURCE[0]}`
#------
#HELP function
#------
function HELP
{
    printf -v line '%*s' "100"; echo -e "${line// /-}";
    echo -e "${BOLD}SHAPELoop: version 1.0 ${NORM}";
    printf '%-90s\n' "${BOLD}This step is the main procedure of SHAPELoop.${NORM}";
    printf -v line '%*s' "100"; echo -e "${line// /-}\n";
    echo -e "${BOLD}Usage:${NORM}\n\t ${SCRIPT} [Options] -s RNA_sequence -r SHAPE_reactivities -o output_dir"\\n;
    echo -e "${BOLD}Required Parameters:${NORM}\n\t <RNA_sequence> <SHAPE_reactivities> <output_dir>"\\n;
    echo -e "${BOLD}Options With Parameters:${NORM}";
    printf "\t%2s\t%-10s\t%-50s\n\n" "-n" "<string>"  "The name of this study, default: test"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-s" "<filename>"  "Sequence file, FASTA format"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-r" "<filename>"  "Specify a SHAPE restraints file"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-o" "<directory>"  "Output directory"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-d" "<filename>" "Dataset for SHAPE pattern identification"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-c" "<filename>" "Dataset to be combined for SHAPE pattern identification"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-m" "<filename>" "Candidate structures predicted by MC-Fold, dot file"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-N" "<int>"  "Specify the size of Boltzmann-weighted candidate ensemble. Default is 1000 structures"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-b" "<int>"  "Specify the number of flanking base pairs of loops. Default is two base pairs"
    echo -e "${BOLD}Options Without Parameters:${NORM}";
    printf "\t%2s\t%-10s\t%-50s\n\n" "-a" ""  "Provide all suboptimal structures"
    printf "\t%2s\t%-10s\t%-50s\n\n" "-h" "" "Help"
    printf -v line '%*s' "100";echo ${line// /-}
    exit 0
}
if [ $# == 0 ] ;then
        HELP;
        exit 1
fi

while getopts 'n:s:r:o:d:c:N:b:m:ah' FLAG; do
    case $FLAG in
        a) #provide suboptimal structures
                all_sup=1;
                ;;
        n) #set study name "n"
                name=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -n!\033[0m"
                    exit 1
                fi
                ;;
        s) #set RNA sequence "s"
                seq=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -s!\033[0m"
                    exit 1
                fi
                ;;
        r) #set SHAPE reactivities "r"
                shape=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -r!\033[0m"
                    exit 1
                fi
                ;;
        o) #set output directory "o"
                out_dir=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -o!\033[0m"
                    exit 1
                fi
                ;;
        d) #set novel dataset "d"
                mode1=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -d!\033[0m"
                    exit 1
                fi
                ;;
        c) #set additional dataset "c"
                mode2=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -c!\033[0m"
                    exit 1
                fi
                ;;
        N) #set candidate size "N"
                ncand=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -N!\033[0m"
                    exit 1
                fi
                ;;
        b) #set flanking base pairs "b"
                addbp=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -b!\033[0m"
                    exit 1
                fi
                ;;
        m) #set mcfold "m"
                mcfold=$OPTARG
                if [[ "$(eval "echo \${$((OPTIND - 1))}")" =~ ^- ]];then
                    echo -e "\033[31mError!!!!!   no argument given for -m!\033[0m"
                    exit 1
                fi
                ;;
        h) #set hellp
                HELP
                ;;
        \?) #unrecognized option - show help;
                HELP
                ;;
        esac
done
shift $((OPTIND-1))


#------
#Test output folder exists or not
#------
if [[ -d $out_dir ]];then
    echo -e "\033[1;34mWarning!!!!!   The output folder will be overwritten!\033[0m"
    rm -r $out_dir
fi

mkdir -p $out_dir
mkdir ${out_dir}/guidance_structure
mkdir ${out_dir}/candidate_ensemble
mkdir ${out_dir}/penalty

out_dir_full="`readlink -e $out_dir`"
bin_dir_full="`readlink -e $0`"
script_dir_full="${bin_dir_full/bin\/SHAPELoop/scripts}"

#------
#Test input files exist or not
#------
if ! [[ -f $seq ]];then
    echo -e "\033[31mError!!!!!   Sequence file not found!\033[0m"
    HELP
fi
if ! [[ -f $shape ]];then
    echo -e "\033[31mError!!!!!   SHAPE reactivity file not found!\033[0m"
        HELP
fi
if ! [[ $ncand ]];then
        ncand=1000
fi

if ! [[ $addbp ]];then
        addbp=2;
fi

if ! [[ $all_sup ]];then
        all_sup=0;
fi

if ! [[ $mcfold ]];then
        mcfold='false';
fi

if ! [[ $name ]];then
        name="test";
fi

#------
#Predict structures
#------
echo "--- SHAPELoop ---";
echo "Parameters used:"
echo ""
printf "%-30s\t%-10s\n" "<name>"  $name
printf "%-30s\t%-10s\n" "<sequence>"  $seq
printf "%-30s\t%-10s\n" "<SHAPE>"  $shape

if [[ $mode1 ]];then
    mode="novel";
    printf "%-30s\t%-10s\n" "<SHAPE patterns>"  "$mode1"
elif [[ $mode2 ]];then
    mode="combined"
    printf "%-30s\t%-10s\n" "<SHAPE patterns>"  "combined"
else
    mode="default"
    printf "%-30s\t%-10s\n" "<SHAPE patterns>"  "default"
fi

printf "%-30s\t%-10s\n" "<candidate size>"  $ncand
printf "%-30s\t%-10s\n" "<flanking base pairs>"  $addbp

if [ $all_sup -eq 1 ];then
    printf "%-30s\t%-10s\n" "<output suboptimal structures>"  "Yes"
fi

if [ "$mcfold" == "false" ];then
    printf "%-30s\t%-10s\n" "<candidate structures from>"  "RNAstructure"
else
    printf "%-30s\t%-10s\n" "<candidate structures from>"  "MC-Fold"
fi

printf "%-30s\t%-10s\n" "<output directory>"  $out_dir
echo ""
echo "---------------"
echo ""
if [ "$mode" == "novel" ];then
    /home/jingyi/miniconda2/envs/python36/bin/python -W ignore $script_dir_full/shape_rule_summary.py $mode1 $mode $out_dir
elif [ "$mode" == "combined" ];then
    /home/jingyi/miniconda2/envs/python36/bin/python -W ignore $script_dir_full/shape_rule_summary.py $mode2 $mode $out_dir
else
    echo "--- Use SHAPELoop provided SHAPE patterns ---"
fi

python $script_dir_full/shapel.py $name $seq $shape $ncand $addbp $out_dir $all_sup $mode $mcfold

if  [[ -f ${out_dir}/${name}.SHAPELoop.dot ]];then
    echo "--- Prediction done! ---"
    echo "Please see the $out_dir_full folder for details"
fi
